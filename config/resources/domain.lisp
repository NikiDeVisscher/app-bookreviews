(in-package :mu-cl-resources)

(setf *include-count-in-paginated-responses* t)
(setf *supply-cache-headers-p* t)
(setf sparql:*experimental-no-application-graph-for-sudo-select-queries* t)
(setf *cache-model-properties-p* t)
(setf mu-support::*use-custom-boolean-type-p* nil)
(setq *cache-count-queries-p* t)
(setf sparql:*query-log-types* nil) ;; hint: use app-http-logger for logging queries instead, all is '(:default :update-group :update :query :ask)


;; example
;; (define-resource dataset ()
;;   :class (s-prefix "dcat:Dataset")
;;   :properties `((:title :string ,(s-prefix "dct:title"))
;;                 (:description :string ,(s-prefix "dct:description")))
;;   :has-one `((catalog :via ,(s-prefix "dcat:dataset")
;;                       :inverse t
;;                       :as "catalog"))
;;   :has-many `((theme :via ,(s-prefix "dcat:theme")
;;                      :as "themes"))
;;   :resource-base (s-url "http://webcat.tmp.semte.ch/datasets/")
;;   :on-path "datasets")

(define-resource book ()
  :class (s-prefix "bf:Work")
  :properties `((:title :string ,(s-prefix "bf:title"))
                (:genre :string ,(s-prefix "schema:genre"))
                (:pages :integer ,(s-prefix "schema:pages"))
                (:language :string ,(s-prefix "schema:language"))
                (:publisher :string ,(s-prefix "schema:publisher"))
                (:date :date ,(s-prefix "bf:date"))
                (:isbn :string ,(s-prefix "bf:isbn"))
                (:averageRating :float ,(s-prefix "schema:averageRating")))
  :has-many `((review :via ,(s-prefix "schema:review")
                       :as "reviews")
             (author :via ,(s-prefix "schema:author")
                        :as "authors"))
  :resource-base (s-url "http://example.org/bookreview/book/")
  :features '(include-uri)
  :on-path "book")

(define-resource author ()
  :class (s-prefix "schema:Person")
  :properties `((:name :string ,(s-prefix "schema:name")))
  :has-many `((account :via ,(s-prefix "schema:account")
                        :as "accounts")
              (book :via ,(s-prefix "bf:Work")
                        :inverse t
                        :as "books"))
  :resource-base (s-url "http://example.org/bookreview/author/")
  :features '(include-uri)
  :on-path "author")

;; reading in the domain.json
(read-domain-file "domain.json")